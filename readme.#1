//README.TXT



//P0.0	UART0_TXD
//P0.1	UART0_RXD
//P0.2	SPI_SCK
//P0.3	SPI_MISO
//P0.4	SPI_MOSI
//P0.5	SPI_NSS
//P0.6	I2C_SDA
//P0.7	I2C_SCL
//P1.0	UART1_TXD
//P1.1	UART1_RXD
//P1.2	N.C
//P1.3	N.C
//P1.4	N.C
//P1.5	N.C







Date 27/06/2006
----------------
1.Fetch test Data tested o.k for 2 sec  806 bytes in pc window
2.delete test tested o.k
3.Added Time Setting from key board error validation to do


Date 30 june 06 12.50
---------------------
1.full system tested o.k
2.added igniter button to into interrupt pin tested o.k


Date 06July 06 4.50
-------------------
1.version 1.0 


Date 11 July 4.00
-----------------
1.adding max and min relay settings of k1,k2,k3 and PR.


Date 17July 064.30
------------------
1.added timer3 (adc )overflow time modified
2.fifo shifted to adc interrupt location.


Date 27 July06 12.00
--------------------
1.global header file is removed from project.
2.compiler settings changed internal variable locations

Date 28 July06 12.59 
--------------------
versiion 3.1
modifcations:-

1.Erase records changed when changing chip selections sector number storing invalid. changed
2.Writefiletoflash changed when changing chip selections  Data record address changing to 0 that is modifed
3.solid state relay on/off shifted to timer interrupt locations.

Version 3.2
Modifications:

1.lcd display modifcations
a.Date and time setting modification
b.relay settings(pr,k1,k2,k3) editing modification

Adding features:-
-----------------
1.add new battery feature
2.add section settings


Date 14 August 06
-----------------
1.Decimal point has been removed.


Date 17 August063.45PM
--------------------------
1.add new battery type functionality tested o.k
2.rename battery tested o.k
3.delete battery tested o.k
4.set active batteries tested o.k
5.fetch test tested o.k
6.Date &time settings to be imporved.


Date 21 August06 
----------------
1.Date and time setting modified.


Date 22 August 06 4.01
----------------------
1.system clock is changed to pll clock to 88.4mhz.
2.K1,K2,k3 Relay settings moved to timer isr routine.
3.pulse relay settings moved to timer isr routine.
tested with this configuration all relays are getting activated and deactivated.


Date 23 August 06 11.20
-----------------------
1.Sections settings changed to the another method.


Date 28 August 06 10.00Am
---------------------------
1.removing comment code in all files.


Date 29 August 06 6.13Pm
-------------------------
1.modified mmi pr,k1,k2,k3 relay settings 


Date 31 August 06 12.27PM
-------------------------
1.While adding new battery,the new battery setting intialized to zero.
2.While renaming the active battery ,active battery not getting modified.
3.renaming active battery settings modified tested ok.


Date 1 Sept 06 6.00
---------------------
1.added comments


Date 19 sept 06 4.45PM
----------------------
1.Section 1 and  2 shown after press igniter button
2.display of active battery info after pressing section settings

Date 18 Dec 06 
---------------
1. added External ADC AD974 code


TESTED


Date 14 Jan 2007
----------------
1. Made Modifications for spike analysis and filtering
2. tested spike issue with a filter count of 50 ; found ok.
4. Pending : Check with 20 Hz Sine Wave
5. Pending : Igniter and Section I showing same on Windows Software in some condition?
6. Appears as if A1 = always LOW ; ADC MUX Channel selector ?? 
   .. almost confirmed... This must be reason for Windows Software showing Same values
   .. no problem suspected with FE Software 
- Modifications done by Prem Chand

Date 16 Jan 2007
-----------------
1. The Data repeating in another channel could be because of SPIKE FILTER
2. Front End -40 +40 Graph Scale tobe relaxed to -48 +48 for test purposes
3. 

Date 17 Jan 2007
----------------
1. Tested for hanging symptoms, But no such symptons are found.
2. Diagnosis is postponed.
3. Please check the *** CAUTION : written in Flash_Tbt.c ***

Date 22 Jan 2007 : 00:15 AM
----------------------------
1. Observed that FlashWrite Routine is returning back without actually
writting to Flash, when SectorNumber is > 0x40. This Field is actually 
not used in the code, except during Erase Operation.
2. Bypassed the return statement, Check is ON. 
3. Problem : Data Fetch retrieves 0xFF for data bytes.
4. There are some Front End Issues. 
The Initial Graph Screen Displays scale in milliseconds on the axis.. 
But data plotting appears as if it is seconds...
5. 



























































		if(ChksumErr) //checksum error occurs
		{
			ChksumErr=0;
			PutStringOnRS232(NACK);
		}

	//	if(MMI_screen !=TBT_MMI_DATE_TIME_SETTINGS && MMI_screen !=TBT_MMI_BATTERY_NUMERIC_KEY && MMI_screen !=TBT_MMI_NEW_RELAY_KEY1 && MMI_screen !=TBT_MMI_NEW_RELAY_KEY1_K2 && MMI_screen !=TBT_MMI_NEW_RELAY_KEY1_K3 && MMI_screen !=TBT_MMI_NEW_RELAY_KEY1_PR && MMI_screen != TBT_MMI_IGNITE_KEY && MMI_screen != SETTINGS &&  MMI_screen != TBT_MMI_CONDITION_50_1 &&  MMI_screen != TBT_MMI_CONDITION_50_2 &&  MMI_screen != TBT_MMI_CONDITION_50_3 &&  MMI_screen != TBT_MMI_CONDITION_50_4 && MMI_screen !=TBT_MMI_CONDITION_50_5 && MMI_screen !=TBT_MMI_SECTION_SETTINGS)
	//		DisplayTime();
		if(completedPacket)  //complete packet is received from serial port 
		{
			completedPacket =0;
			DecodeCommands();   //decoding serial commands
		}
		KeyPressed = ScanKeyPad();  //scan keypad
		switch(KeyPressed)
		{
			case FIRST_KEY :   //first key
				switch(MMI_screen)
				{
					case TBT_MMI_MAIN_MENU_KEYS:  //record information
				      RecordsInformation();
					break;
					case TBT_MMI_TEST_SELECTION:  //display battery serial number
					   	 BatterySerailNumber();
					  	 LCDInstWrite(LCD_BLINKING_ON);
					  	 LCDGotoXY(10,3);
					break;
					case TBT_MMI_TEST_CONFIGURATION:	//test configuration
						strcpy(stRecordInfo.Battery1Type,ActiveBat1Info);
						for(BatteryIndex =1;BatteryIndex <=10;BatteryIndex++)
						{
							
							FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
							if((strncmp(ReadRelayValues.BatteryName,ActiveBat1Info,7)) == 0)
								break;
						}
						if(TestType !=RELAY_SETTINGS && TestType != SECTION_SETTINGS)
							BatterySerailNumber();
						else
						if(TestType == RELAY_SETTINGS)
						{
							TestType  = 0xFF;	
							RelaySelections();
						}
						else
						if(TestType == SECTION_SETTINGS)
						{
							TestType  = 0xFF;	
							SectionSettings();
						}
					
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('1',10);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('1',9);
						else
							ReadInput('1',7);
						
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('1',3);
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('1',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('1',1);
						else if(TestType == DURATION)
							ReadInput('1',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('1',4);

					break;
					case TBT_MMI_RELAY_SELECTION_KEYS:
						FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
						IntervalDuration();
					break;
					case SETTINGS:
						DateAndTimeScreen();
					break;
					case TBT_MMI_CONDITION_MENU:
						TestCondition_50p();
					break;
					case TBT_MMI_SECTION_SETTINGS:
						if(KeyIndex >=0 && KeyIndex <2)
						{
							LCDPutChar('1');
							KeyBuffer[KeyIndex++]= '1';
						}
					break;
				}
		   	break;
			case SECOND_KEY :	//second key
				switch(MMI_screen)
				{
					case SETTINGS:
						TestType = RELAY_SETTINGS;
						TestConfigurations();
					break;
					case TBT_MMI_MAIN_MENU_KEYS:
						Settings();
					break;
					case TBT_MMI_TEST_CONFIGURATION:
						strcpy(stRecordInfo.Battery1Type,ActiveBat2Info);
						for(BatteryIndex =1;BatteryIndex <=10;BatteryIndex++)
						{
							
							FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
							if((strncmp(ReadRelayValues.BatteryName,ActiveBat2Info,7)) == 0)
								break;
						}
					
						if(TestType !=RELAY_SETTINGS && TestType != SECTION_SETTINGS)
							BatterySerailNumber();
						else
						if(TestType == RELAY_SETTINGS)
						{
							TestType  = 0xFF;	
							RelaySelections();
						}
						else
						if(TestType == SECTION_SETTINGS)
						{
							TestType  = 0xFF;	
							SectionSettings();
						}
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('2',10);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('2',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('2',9);
						else
							ReadInput('2',7);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('2',1);
						else if(TestType == DURATION)
							ReadInput('2',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('2',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('2',4);
					break;
					case TBT_MMI_RELAY_SELECTION_KEYS:
						FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
						NewRelayK1();
					break;
					case TBT_MMI_CONDITION_MENU:
						TestCondition_50n();
					break; 
					case TBT_MMI_SECTION_SETTINGS:
						if(KeyIndex >=0 && KeyIndex <2)
						{
							LCDPutChar('2');
							KeyBuffer[KeyIndex++]= '2';
						}
					break;
				}
	  	    break;
			case THIRD_KEY :    //third key
				switch(MMI_screen)
				{
					case TBT_MMI_MAIN_MENU_KEYS:
						IntializeVariables();  // Added on 21st Jan 2007	
						TestConfigurations();
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('3',10);
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('3',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('3',1);
						else if(TestType == DURATION)
							ReadInput('3',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('3',4);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('3',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('3',9);
						else
							ReadInput('3',7);
					break;
					case TBT_MMI_RELAY_SELECTION_KEYS:
						FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
						NewRelayK2();
					break;
					case TBT_MMI_CONDITION_MENU:
						TestCondition_30n();
					break;
					case SETTINGS:
						//SectionSettings();
						TestType = SECTION_SETTINGS;
						TestConfigurations();

					break;
					case TBT_MMI_SECTION_SETTINGS:
						if(KeyIndex >=0 && KeyIndex <2)
						{
							LCDPutChar('3');
							KeyBuffer[KeyIndex++]= '3';
						}
					break;
				}
			break;
			case FOURTH_KEY : 	//fourth key
				switch(MMI_screen)
				{
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('4',10);
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('4',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('4',1);
						else if(TestType == DURATION)
							ReadInput('4',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('4',4);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('4',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('4',9);
						else
							ReadInput('4',7);

					break;
					case TBT_MMI_RELAY_SELECTION_KEYS:
						FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
						NewRelayK3();
					break;

					case TBT_MMI_CONDITION_MENU:
						TestCondition_55p();
					break;
					
				}
			break;
			case FIFTH_KEY :   //fifth key
				switch(MMI_screen)
				{
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('5',4);
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('5',10);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('5',1);
						else if(TestType == DURATION)
							ReadInput('5',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('5',4);

					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('5',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('5',9);
						else
							ReadInput('5',7);
					break;
	
					case TBT_MMI_CONDITION_MENU:
						TestCondition_Room_Temp();
					break;
				}
			break;
			case SIXTH_KEY : 	//sixth key
				switch(MMI_screen)
				{
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('6',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('6',1);
						else if(TestType == DURATION)
							ReadInput('6',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('6',4);
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('6',10);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('6',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('6',9);
						else
							ReadInput('6',7);
					break;
				}
			break;
			case SEVENTH_KEY : 	//seventh key
				switch(MMI_screen)
				{
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('7',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('7',1);
						else if(TestType == DURATION)
							ReadInput('7',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('7',4);

					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('7',10);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('7',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('7',9);
						else
							ReadInput('7',7);
					break;
				}
			break;
			case EIGHTH_KEY : 		//eighth key
				switch(MMI_screen)
				{
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('8',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('8',1);
						else if(TestType == DURATION)
							ReadInput('8',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('8',4);
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('8',10);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('8',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('8',9);
						else
							ReadInput('8',9);
					break;
				}
			break;
			case NINTH_KEY : 	//ninth key
				switch(MMI_screen)
				{
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('9',4);
					break;
					//8 replaced with 9 for three read values
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('9',1);
						else if(TestType == DURATION)
							ReadInput('9',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('9',4);

					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('9',10);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('9',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('9',9);
						else
							ReadInput('9',7);
					break;
				}
			break;
			case ZERO_KEY : 	//zero key
				switch(MMI_screen)
				{
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						ReadInput('0',4);
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType ==COUNT)
							ReadInput('0',1);
						else if(TestType == DURATION)
							ReadInput('0',2);
						else if(TestType == START_DURATION || TestType == INTERVAL)
							ReadInput('0',4);
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						ReadInput('0',10);
					break;
					case TBT_MMI_IGNITE_KEY:
							ReadInput('0',3);
					break;
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
							ReadInput('0',9);
						else
							ReadInput('0',7);

					break;
					case TBT_MMI_SECTION_SETTINGS:
						if(KeyIndex >=0 && KeyIndex <2)
						{
							LCDPutChar('0');
							KeyBuffer[KeyIndex++]= '0';
						}
					break;	
				}
			break;
			case LEFT_ARROW_KEY: //left_arrow (B)
				switch(MMI_screen)
				{
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
						{
							if(KeyIndex <=9 && KeyIndex >0)
							{
								if(KeyIndex == 3 || KeyIndex == 6)
								{
									KeyIndex--;
									LCDInstWrite(LCD_CURSOR_LEFT);
								}
								LCDInstWrite(LCD_BLINKING_ON);
								LCDInstWrite(LCD_CURSOR_LEFT);
								KeyIndex--;
							}
						}
						else
						{
							if(KeyIndex <=7 && KeyIndex >0)
							{
								if(KeyIndex == 3 || KeyIndex == 6)
								{
									KeyIndex--;
									LCDInstWrite(LCD_CURSOR_LEFT);
								}
								LCDInstWrite(LCD_BLINKING_ON);
								LCDInstWrite(LCD_CURSOR_LEFT);
								KeyIndex--;
							}

						}
					
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						if(KeyIndex <=11 && KeyIndex >0)
						{
							KeyIndex--;
							LCDInstWrite(LCD_BLINKING_ON);
							LCDInstWrite(LCD_CURSOR_LEFT);
						}
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType == DURATION)
						{
							if(KeyIndex > 0)                            //Modified from "== 2" to ">0"
							{
								KeyIndex--;
								LCDInstWrite(LCD_CURSOR_LEFT);
								//LCDInstWrite(LCD_CURSOR_LEFT);        // Modified on 7-11-06
								//KeyIndex--;                           // Modified on 7-11-06
							}
						}
						else if(TestType == START_DURATION || TestType == INTERVAL)
						{
							if(KeyIndex <=4 && KeyIndex >=1)
							{
								if(KeyIndex == 4)
								{
									KeyIndex--;
							  		LCDInstWrite(LCD_CURSOR_LEFT);
								}
								LCDInstWrite(LCD_BLINKING_ON);
						  		LCDInstWrite(LCD_CURSOR_LEFT);
								KeyIndex--;	
							}
						}
						else if(TestType == COUNT)
						{
							if(KeyIndex >0 && KeyIndex <2)
							{
								KeyIndex--;
								LCDInstWrite(LCD_CURSOR_LEFT);
							}
						}
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						if(KeyIndex <=4 && KeyIndex >=1)
						{
							if(KeyIndex == 4)
							{
								KeyIndex--;
							  	LCDInstWrite(LCD_CURSOR_LEFT);
							}
							LCDInstWrite(LCD_BLINKING_ON);
						  	LCDInstWrite(LCD_CURSOR_LEFT);
							KeyIndex--;	
			
						}
					break;
					
					case TBT_MMI_IGNITE_KEY:
						if(KeyIndex <=4 && KeyIndex >0)
						{
							KeyIndex--;	
							if(KeyIndex == 3)
							  	LCDInstWrite(LCD_CURSOR_LEFT);
							LCDInstWrite(LCD_BLINKING_ON);
						  	LCDInstWrite(LCD_CURSOR_LEFT);
			
						}
  					break;
					case TBT_MMI_CONDITION_50_1:
					case TBT_MMI_CONDITION_50_2:
					case TBT_MMI_CONDITION_50_3:
					case TBT_MMI_CONDITION_50_4:
//					case TBT_MMI_CONDITION_50_5:
						if(LCD_CurrentY == 2)
							LCDGotoXY(1,3);
						else if(LCD_CurrentY == 3)
							LCDGotoXY(1,4);
						else if(LCD_CurrentY == 4)
							LCDGotoXY(1,1);
						else if(LCD_CurrentY == 1)
							LCDGotoXY(1,2);
					break;	

					case TBT_MMI_CONDITION_50_5:
						if(LCD_CurrentY == 2)
							LCDGotoXY(1,3);
						else if(LCD_CurrentY == 3)
							LCDGotoXY(1,4);
						else if(LCD_CurrentY == 4)
						{
							if(!i)
							{
								i =1;
								LCDGotoXY(1,1);
							}
							else
							{
								i =0;
								LCDGotoXY(15,4);
							}

//							LCDGotoXY(1,1);
						}
						else if(LCD_CurrentY == 1)
							LCDGotoXY(1,2);
					break;				
					case TBT_MMI_SECTION_SETTINGS:				
						if(KeyIndex >0 && KeyIndex <=2)
						{
							KeyIndex--;
							LCDInstWrite(LCD_CURSOR_LEFT);
						}
					break;

				}
			break;
			case RIGHT_ARROW_KEY : //right _arrow (A on keypad)
				switch(MMI_screen)
				{
					case TBT_MMI_DATE_TIME_SETTINGS:
						if(TestType == TIME_SETTINGS)
						{
							if(KeyIndex <9 && KeyIndex >=0)
							{
								if(KeyIndex == 1 || KeyIndex == 4)
								{
									KeyIndex++;
									LCDInstWrite(LCD_CURSOR_RIGHT);
								}
								LCDInstWrite(LCD_BLINKING_ON);
								LCDInstWrite(LCD_CURSOR_RIGHT);
								KeyIndex++;
							}
						}
						else
						{
							if(KeyIndex <7 && KeyIndex >=0)
							{
								if(KeyIndex == 1 || KeyIndex == 4)
								{
									KeyIndex++;
									LCDInstWrite(LCD_CURSOR_RIGHT);
								}
								LCDInstWrite(LCD_BLINKING_ON);
								LCDInstWrite(LCD_CURSOR_RIGHT);
								KeyIndex++;
							}

						}
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
						if(KeyIndex <10 && KeyIndex >=0)
						{
							KeyIndex++;
							LCDInstWrite(LCD_BLINKING_ON);
							LCDInstWrite(LCD_CURSOR_RIGHT);
						}
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:
						if(TestType == DURATION)
						{
								if(KeyIndex < 2 )                      // Modified from "==0" to "<2"
							{
								KeyIndex++;
								LCDInstWrite(LCD_CURSOR_RIGHT);
								//LCDInstWrite(LCD_CURSOR_RIGHT);  // Modified on 7-11-06
								//KeyIndex++;                      // Modified on 7-11-06
							}
						}
						else if(TestType == START_DURATION || TestType == INTERVAL)
						{
							if(KeyIndex <3 && KeyIndex >=0)
							{
								if(KeyIndex == 2)
								{
									KeyIndex++;
							  		LCDInstWrite(LCD_CURSOR_RIGHT);
								}
								LCDInstWrite(LCD_BLINKING_ON);
							  	LCDInstWrite(LCD_CURSOR_RIGHT);
								KeyIndex++;
							}
						}
						else if(TestType == COUNT)
						{
							if(KeyIndex >=0 && KeyIndex <1)
							{
								KeyIndex++;
								LCDInstWrite(LCD_CURSOR_RIGHT);
							}
						}
					
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
						if(KeyIndex <3 && KeyIndex >=0)
						{
								if(KeyIndex == 2)
								{
									KeyIndex++;
							  		LCDInstWrite(LCD_CURSOR_RIGHT);
								}
								LCDInstWrite(LCD_BLINKING_ON);
							  	LCDInstWrite(LCD_CURSOR_RIGHT);
								KeyIndex++;	
						}
					break;
					case TBT_MMI_IGNITE_KEY:
						if(KeyIndex <3)
						{
							KeyIndex++;	
  							LCDInstWrite(LCD_BLINKING_ON);
					  		LCDInstWrite(LCD_CURSOR_RIGHT);
						}
				  	break;
					case TBT_MMI_CONDITION_50_1:
					case TBT_MMI_CONDITION_50_2:
					case TBT_MMI_CONDITION_50_3:
					case TBT_MMI_CONDITION_50_4:

						if(LCD_CurrentY == 2)
							LCDGotoXY(1,1);
						else if(LCD_CurrentY == 3)
							LCDGotoXY(1,2);
						else if(LCD_CurrentY == 4)
							LCDGotoXY(1,3);
						else if(LCD_CurrentY == 1)
							LCDGotoXY(1,4);
					break;	
					case TBT_MMI_CONDITION_50_5:
						if(LCD_CurrentY == 2)
							LCDGotoXY(1,1);
						else if(LCD_CurrentY == 3)
							LCDGotoXY(1,2);
						else if(LCD_CurrentY == 4)
						{
							if(!i)
							{
								i =1;
								LCDGotoXY(1,3);
							}
							else
							{
								i =0;
								LCDGotoXY(15,4);
							}
						}
						else if(LCD_CurrentY == 1)
							LCDGotoXY(1,4);
					break;
					case TBT_MMI_SECTION_SETTINGS:				
						if(KeyIndex >=0 && KeyIndex <2)
						{
							KeyIndex++;
							LCDInstWrite(LCD_CURSOR_RIGHT);
						}
					break;

				}
  			break;
			case ENTER_KEY :  //enter key(* on keypad)
				switch(MMI_screen)
				{
					case TBT_MMI_DATE_TIME_SETTINGS:
						KeyIndex =0;
						if(TestType == TIME_SETTINGS)
						{
							stTime.Date  = ((KeyBuffer[0] -'0')<<4)| (KeyBuffer[1] -'0');
							stTime.Month = ((KeyBuffer[3] -'0')<<4)| (KeyBuffer[4] -'0');
							stTime.Year  = ((KeyBuffer[6] -'0')<<12)|((KeyBuffer[7] -'0')<<8) | ((KeyBuffer[8]-'0')<<4) | (KeyBuffer[9]-'0');
							if(stTime.Date >=1 && stTime.Date <= 0x31)
							{
								if(stTime.Month >=1 && stTime.Month <=0x12)
								{
									if(stTime.Year >=0x2006)
									{
										TestType = DATE_SETTINGS;
										LCDGotoXY(6,4);
										sprintf(KeyBuffer,"%02x:%02x:%02x",(unsigned int)stTime.Hours&0x3f,(unsigned int)stTime.Minutes,(unsigned int)stTime.Seconds); 
									}
									else
									{
										TestType = TIME_SETTINGS;
										LCDGotoXY(6,3);
									}
								}
								else
								{
									TestType = TIME_SETTINGS;
									LCDGotoXY(6,3);
								}
							}
							else
							{
								TestType = TIME_SETTINGS;
								LCDGotoXY(6,3);
							}
								
						}
				 		else if(TestType == DATE_SETTINGS)
						{
							stTime.Hours  = ((KeyBuffer[0] -'0')<<4)| (KeyBuffer[1] -'0');
							stTime.Minutes= ((KeyBuffer[3] -'0')<<4)| (KeyBuffer[4] -'0');
							stTime.Seconds= (((KeyBuffer[6]-'0')<<4) | (KeyBuffer[7]-'0'));
							if(stTime.Hours >=0 && stTime.Hours <=0x24)
							{
								if(stTime.Minutes >=0 && stTime.Minutes <=0x59)
								{
									if(stTime.Seconds >=0 && stTime.Seconds <=0x59)
									{
										SetTime_Date(stTime);
										LCDInstWrite(LCD_BLINKING_OFF);
										MainMenu();
									}
								}
							}
							else
							{
								TestType = DATE_SETTINGS;
								LCDGotoXY(6,4);
							}
						}
					break;
					case TBT_MMI_RECORD_INFO:  
					case TBT_MMI_TEST_COMPLETED:
					case TBT_MMI_TEST_STATUS:
						MainMenu();
					break;
					case TBT_MMI_BATTERY_NUMERIC_KEY:
//						if(!KeyIndex == 0)
//							strcpy(stRecordInfo.SerialNumber,"00000000000");
//						else
							KeyBuffer[11]= '\0';
							strcpy(stRecordInfo.SerialNumber,KeyBuffer);
							KeyIndex =0;
							LCDInstWrite(LCD_BLINKING_OFF);
//MODIFIED ON 07 AUGUST 2006 BY NAGARJUNA
							TestConditoion_Menu();
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
						if(TestType ==K1_RELAY)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
								LCDGotoXY(15,4);
								sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.K1StopTime/1000.0));
								TestType =K1_RELAY_STOP;
//								TestType = 0xFF;
							}
							else
							{
								WriteRelayValues.K1StartTime = atof(KeyBuffer)*1000;
								if(WriteRelayValues.K1StartTime >=MIN_K1_START_TIME && WriteRelayValues.K1StartTime <=MAX_K1_START_TIME)
								{
									LCDGotoXY(15,4);
									sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.K1StopTime/1000.0));
									TestType =K1_RELAY_STOP;
	//								TestType = 0xFF;
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID K1 RELAY START TIME\r\n");
									LCDGotoXY(15,3);
									KeyIndex =0;
								}
							}
						}
						else
						{
							if(!KeyIndex)
							{
								FLASH_Read  (RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
								WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
								WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;
								WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
								WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
								WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
								WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
								WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
								WriteRelayValues.PRStart = ReadRelayValues.PRStart;
								WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
								WriteRelayValues.PRCount = ReadRelayValues.PRCount;
								WriteRelayValues.Interval = ReadRelayValues.Interval;
								WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
								WriteRelayValues.Testduration = ReadRelayValues.Testduration;
								//added
								strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
							
								FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
								FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
								
								LCDInstWrite(LCD_BLINKING_OFF);
								LCDWriteLine(2,"                    ",2);
								TestType = 0xFF;
								RelaySelections();
							}
							else
							{
								WriteRelayValues.K1StopTime = atof(KeyBuffer)*1000;
								if(WriteRelayValues.K1StopTime >=MIN_K1_STOP_TIME && WriteRelayValues.K1StopTime <=MAX_K1_STOP_TIME)
								{
									LCDInstWrite(LCD_BLINKING_OFF);
									FLASH_Read  (RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
									WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
									WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

									WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
									WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
									WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
									WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
									WriteRelayValues.PRStart = ReadRelayValues.PRStart;
									WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
									WriteRelayValues.PRCount = ReadRelayValues.PRCount;
									WriteRelayValues.Interval = ReadRelayValues.Interval;
									WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
									WriteRelayValues.Testduration = ReadRelayValues.Testduration;

									strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
									FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
									FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
									LCDInstWrite(LCD_BLINKING_OFF);
									LCDWriteLine(2,"                    ",2);
									RelaySelections();
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID K1 RELAY STOP TIME\r\n");
									LCDGotoXY(15,4);
									KeyIndex =0;
								}
							}
						}
						KeyIndex =0;
//						DecimalPoint =0;
					break;			
					case TBT_MMI_NEW_RELAY_KEY1_K2:
					//	KeyBuffer[KeyIndex] ='\0';
						if(TestType ==K2_RELAY)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
								LCDGotoXY(15,4);
								sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.K2StopTime/1000.0));
								TestType = K2_RELAY_STOP; //0xFF;
							}
							else
							{
								WriteRelayValues.K2StartTime = atof(KeyBuffer)*1000;
								if(WriteRelayValues.K2StartTime >=MIN_K2_START_TIME && WriteRelayValues.K2StartTime <=MAX_K2_START_TIME)
								{
									LCDGotoXY(15,4);
									sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.K2StopTime/1000.0));
									TestType = K2_RELAY_STOP;
									//TestType = 0xFF;
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID K2 RELAY START TIME\r\n");
									WriteRelayValues.K2StartTime =0;
									LCDGotoXY(15,3);
									KeyIndex =0;
								}
							}
						}
						else
						{
							if(!KeyIndex)
							{
								WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
								FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
								WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
								WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

								WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
								WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
								WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
								WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
								WriteRelayValues.PRStart = ReadRelayValues.PRStart;
								WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
								WriteRelayValues.PRCount = ReadRelayValues.PRCount;
								WriteRelayValues.Interval = ReadRelayValues.Interval;

								strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
								WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
								WriteRelayValues.Testduration = ReadRelayValues.Testduration;
								FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
								FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
								
								LCDInstWrite(LCD_BLINKING_OFF);
								LCDWriteLine(2,"                    ",2);
								TestType = 0xff; //K2_RELAY_STOP;
								RelaySelections();
							}
							else
							{
								WriteRelayValues.K2StopTime = atof(KeyBuffer)*1000;
								if(WriteRelayValues.K2StopTime >=MIN_K2_STOP_TIME && WriteRelayValues.K2StopTime <=MAX_K2_STOP_TIME)
								{
									TestType = K2_RELAY;
									LCDInstWrite(LCD_BLINKING_OFF);
									FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
									WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
									WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

									WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
									WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
									WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
									WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
									WriteRelayValues.PRStart = ReadRelayValues.PRStart;
									WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
									WriteRelayValues.PRCount = ReadRelayValues.PRCount;
									WriteRelayValues.Interval = ReadRelayValues.Interval;
									WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
									WriteRelayValues.Testduration = ReadRelayValues.Testduration;
									strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
	
									FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
									FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
									LCDInstWrite(LCD_BLINKING_OFF);
									LCDWriteLine(2,"                    ",2);
									RelaySelections();
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID K2 RELAY STOP TIME\r\n");
									LCDGotoXY(15,4);
									KeyIndex =0;
								}
							}
						}
						KeyIndex =0;
//						DecimalPoint =0;
					break;
					case TBT_MMI_CONDITION_50_1:
						if(LCD_CurrentY == 1)
							stRecordInfo.TestCondition =4;
						else if(LCD_CurrentY == 2)
							stRecordInfo.TestCondition =5;
						else if(LCD_CurrentY == 3)
							stRecordInfo.TestCondition =6;
						else if(LCD_CurrentY == 4)
							stRecordInfo.TestCondition =7;
						else
						{
							//Invalid Entry
						}
						ConnectBatteryTerminals();
					break;

					case TBT_MMI_CONDITION_50_2:
						if(LCD_CurrentY == 1)
							stRecordInfo.TestCondition =1;
						else if(LCD_CurrentY == 2)
							stRecordInfo.TestCondition =2;
						else if(LCD_CurrentY == 3)
							stRecordInfo.TestCondition =3;
						else
						{
							//Invalid Entry
						}
						ConnectBatteryTerminals();
					break;					

					case TBT_MMI_CONDITION_50_3:
						if(LCD_CurrentY == 1)
							stRecordInfo.TestCondition =13;
						else if(LCD_CurrentY == 2)
							stRecordInfo.TestCondition =14;
						else if(LCD_CurrentY == 3)
							stRecordInfo.TestCondition =15;
						else if(LCD_CurrentY == 4)
							stRecordInfo.TestCondition =16;
						else
						{
							//Invalid Entry
						}
						ConnectBatteryTerminals();
					break;					

					case TBT_MMI_CONDITION_50_4:
						if(LCD_CurrentY == 1)
							stRecordInfo.TestCondition =17;
						else if(LCD_CurrentY == 2)
							stRecordInfo.TestCondition =18;
						else if(LCD_CurrentY == 3)
							stRecordInfo.TestCondition =19;
						else if(LCD_CurrentY == 4)
							stRecordInfo.TestCondition =20;
						else
						{
							//Invalid Entry
						}
						ConnectBatteryTerminals();
					break;					

					case TBT_MMI_CONDITION_50_5:
						if(LCD_CurrentY == 1)
							stRecordInfo.TestCondition =8;
						else if(LCD_CurrentY == 2)
							stRecordInfo.TestCondition =9;
						else if(LCD_CurrentY == 3)
							stRecordInfo.TestCondition =10;
						else if(LCD_CurrentY == 4 && LCD_CurrentX == 1)
							stRecordInfo.TestCondition =11;
						else if(LCD_CurrentY == 4 && LCD_CurrentX == 15)
							stRecordInfo.TestCondition =12;

						else
						{
							//Invalid Entry
						}
						ConnectBatteryTerminals();
					break;					
					case TBT_MMI_NEW_RELAY_KEY1_K3:
					//	KeyBuffer[KeyIndex] ='\0';
						if(TestType ==K3_RELAY)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
								LCDGotoXY(15,4);
								sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.K3StopTime/1000.0));
//								TestType = 0xFF;
								TestType = K3_RELAY_STOP;

							}
							else
							{
								WriteRelayValues.K3StartTime = atof(KeyBuffer)*1000;
								if(WriteRelayValues.K3StartTime >=MIN_K3_START_TIME && WriteRelayValues.K3StartTime <=MAX_K3_START_TIME)
								{
									LCDGotoXY(15,4);
									sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.K3StopTime/1000.0));
									TestType = K3_RELAY_STOP;
	//								TestType = 0xFF;
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID K3 RELAY START TIME\r\n");
									WriteRelayValues.K3StartTime =0;
									LCDGotoXY(15,3);
									KeyIndex =0;
								}
							}
						}
						else
						{
							if(!KeyIndex)
							{
								WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
								FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
								WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
								WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

								WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
								WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
								WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
								WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
								WriteRelayValues.PRStart = ReadRelayValues.PRStart;
								WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
								WriteRelayValues.PRCount = ReadRelayValues.PRCount;
								WriteRelayValues.Interval = ReadRelayValues.Interval;
								WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
								WriteRelayValues.Testduration = ReadRelayValues.Testduration;

								strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
							//	memcpy(&WriteRelayValues,&ReadRelayValues,sizeof(struct Relay));
								FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
								FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
								
								LCDInstWrite(LCD_BLINKING_OFF);
								LCDWriteLine(2,"                    ",2);

								TestType = 0xFF;
								RelaySelections();
							}
							else
							{
								WriteRelayValues.K3StopTime = atof(KeyBuffer)*1000;
								if(WriteRelayValues.K3StopTime >=MIN_K3_STOP_TIME && WriteRelayValues.K2StartTime <=MAX_K2_STOP_TIME)
								{
									TestType = K3_RELAY;
									LCDInstWrite(LCD_BLINKING_OFF);
									FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
									WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
									WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

									WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
									WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
									WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
									WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
									WriteRelayValues.PRStart = ReadRelayValues.PRStart;
									WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
									WriteRelayValues.PRCount = ReadRelayValues.PRCount;
									WriteRelayValues.Interval = ReadRelayValues.Interval;
									WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
									WriteRelayValues.Testduration = ReadRelayValues.Testduration;
	
									strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
			
									FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
									FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
									LCDInstWrite(LCD_BLINKING_OFF);
									LCDWriteLine(2,"                    ",2);
									RelaySelections();
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID K3 RELAY STOP TIME\r\n");
									WriteRelayValues.K3StopTime =0;
									LCDGotoXY(15,4);
									KeyIndex =0;
								}
							}
						}
						KeyIndex =0;
//						DecimalPoint =0;
					break;
					case TBT_MMI_NEW_RELAY_KEY1_PR:   //pulse relay settings
						if(TestType == START_DURATION)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.PRStart = ReadRelayValues.PRStart;
								LCDGotoXY(9,3);
								sprintf(KeyBuffer,"%03ld",(ReadRelayValues.PRDuration));			//Modified from 1.1 float to  3 decimals
								TestType =DURATION;
							}

							else
							{
								WriteRelayValues.PRStart = atof(KeyBuffer)*1000;
								if(WriteRelayValues.PRStart >=MIN_PR_START_TIME && WriteRelayValues.PRStart <=MAX_PR_START_TIME)
								{
									LCDGotoXY(9,3);
									sprintf(KeyBuffer,"%03ld",(ReadRelayValues.PRDuration));		//Modified from 1.1 float to  3 decimals
									TestType =DURATION;
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID PR START  TIME\r\n");
									LCDGotoXY(10,2);
									KeyIndex =0;
									LCDInstWrite(LCD_BLINKING_ON);
									TestType = START_DURATION;
								}
							}
						}
						else if(TestType == DURATION)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
								LCDGotoXY(19,3);
								sprintf(KeyBuffer,"%02d",ReadRelayValues.PRCount);
								TestType =COUNT;
							}
							else
							{
								WriteRelayValues.PRDuration = atoi(KeyBuffer);	// Changed the PRDuration from Sec to msec by removing *1000
								if(WriteRelayValues.PRDuration >=MIN_PR_DURATION && WriteRelayValues.PRDuration <= MAX_PR_DURATION)
								{
									LCDGotoXY(19,3);
									sprintf(KeyBuffer,"%02d",ReadRelayValues.PRCount);
									TestType =COUNT;
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID PR DURATION  TIME\r\n");
									LCDGotoXY(9,3);
									KeyIndex =0;
									TestType =DURATION;
								}
							}
						}
						else if(TestType ==COUNT)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.PRCount = ReadRelayValues.PRCount;
								LCDGotoXY(13,4);
								sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.Interval/1000.0));
								LCDInstWrite(LCD_BLINKING_ON);
								TestType =INTERVAL;
							}
							else
							{
								WriteRelayValues.PRCount = atoi(KeyBuffer);
								if(WriteRelayValues.PRCount >= MIN_PR_COUNT_TIME && WriteRelayValues.PRCount <=MAX_PR_COUNT_TIME)
								{
									LCDGotoXY(13,4);
									sprintf(KeyBuffer,"%05.1f",((float)ReadRelayValues.Interval/1000.0));
									LCDInstWrite(LCD_BLINKING_ON);
									TestType =INTERVAL;
								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID PR COUNT  TIME\r\n");
									LCDGotoXY(19,3);
									KeyIndex =0;
//									DecimalPoint =0;
									TestType =COUNT;
								}
							}
						}
						else if(TestType ==INTERVAL)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.Interval = ReadRelayValues.Interval;
								FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
								WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
								WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

								WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
								WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
								WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
								WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
								WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
								WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
								strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
								WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
								WriteRelayValues.Testduration = ReadRelayValues.Testduration;
								FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
								FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
									
								LCDInstWrite(LCD_BLINKING_OFF);
								LCDGotoXY(12,1);
								LCDPutText("  ");
								LCDWriteLine(2,"                    ",2);

								RelaySelections();
							}
							else
							{
								WriteRelayValues.Interval=atof(KeyBuffer)*1000;
								if(WriteRelayValues.Interval >=MIN_PR_INTERVAL_TIME && WriteRelayValues.Interval <=MAX_PR_INTERVAL_TIME)
								{
									if((WriteRelayValues.PRStart+(WriteRelayValues.PRCount*WriteRelayValues.Interval) - WriteRelayValues.PRDuration) <120000)
									{
										LCDInstWrite(LCD_BLINKING_OFF);
										FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
										WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
										WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

										WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
										WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
										WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
										WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
										WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
										WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
										WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
										WriteRelayValues.Testduration = ReadRelayValues.Testduration;
		
										strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
										FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
										FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
										LCDInstWrite(LCD_BLINKING_OFF);
										LCDGotoXY(12,1);
										LCDPutText("  ");
										LCDWriteLine(2,"                    ",2);
										RelaySelections();
									}
									else
									{
										LCDWriteLine(2,"INVALID SETTINGS(PR)",2);
										LCDInstWrite(LCD_BLINKING_OFF);
										RelaySelections();
									}

								}
								else
								{
									if(gbDebugPort)
										Put_String_UART1("\r\n INVALID PR INTERVAL  TIME\r\n");
									LCDGotoXY(13,4);
									KeyIndex =0;
//									DecimalPoint =0;
									TestType =INTERVAL;
								}
							}
						}
						KeyIndex = 0;
//						DecimalPoint =0;
					break;
					case TBT_MMI_RELAY_SELECTION_KEYS:  //added 07 july06
						FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
					    IgniterSettings();  
				  	break;	
					case TBT_MMI_IGNITE_KEY:
						if(TestType ==IGN_DURATION)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
								MMI_screen = TBT_MMI_IGNITE_KEY;
								sprintf(KeyBuffer,"%03ld",ReadRelayValues.Testduration);
								LCDGotoXY(15,4);
//								TestType = 0xff;
								TestType = TEST_DURATION;
							}
							else
							{
								WriteRelayValues.IgnitionDuration = atoi(KeyBuffer);
								MMI_screen = TBT_MMI_IGNITE_KEY;
								LCDGotoXY(15,4);
								TestType = TEST_DURATION;
//								TestType = 0xff;
							}
						}
						else
						{
							if(!KeyIndex)
							{
								WriteRelayValues.Testduration = ReadRelayValues.Testduration;
								FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
								WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
								WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

								WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
								WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
								WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
								WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;										WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
								WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
								WriteRelayValues.PRStart = ReadRelayValues.PRStart;
								WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
								WriteRelayValues.PRCount = ReadRelayValues.PRCount;
								WriteRelayValues.Interval = ReadRelayValues.Interval;

								strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
								FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
								FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
									
								LCDInstWrite(LCD_BLINKING_OFF);
								TestType = 0xff;
								MainMenu();   //added on 07 July
							}
							else
							{
//								WriteRelayValues.Testduration = atof(KeyBuffer)*1000;
								WriteRelayValues.Testduration = atoi(KeyBuffer); //changed from atof
								if(WriteRelayValues.Testduration*1000 <=120000)
								{
									if((WriteRelayValues.PRStart+(WriteRelayValues.PRCount*WriteRelayValues.Interval) - WriteRelayValues.PRDuration) <(WriteRelayValues.Testduration*1000))
									{
										LCDInstWrite(LCD_BLINKING_OFF);
										FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
										WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
										WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;

										WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
										WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
										WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
										WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
										WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
										WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
										WriteRelayValues.PRStart = ReadRelayValues.PRStart;
										WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
										WriteRelayValues.PRCount = ReadRelayValues.PRCount;
										WriteRelayValues.Interval = ReadRelayValues.Interval;
										strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);								
										FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
										FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
										TestType = 0xff;
										MainMenu();   //added on 07 July
									}
									else
									{
										LCDWriteLine(2,"INVALID SETTINGS(TD)",2);
										RelaySelections();
									}
								}
								else
								{
									LCDGotoXY(15,4);
									TestType = 0xff;
								}
							}
						}
						KeyIndex = 0;
//						DecimalPoint =0;
					break;
					case TBT_MMI_CONNECT_BATTERY:
						ConnectLoads();
					break;
					case TBT_MMI_CONNECT_LOAD:
						ResetToAbort();
					break;
					case TBT_MMI_TEST_PROCESSING:
						TestProcessing();
					break;
					case TBT_MMI_SECTION_SETTINGS:
						
						if(TestType ==TBT_MMI_SECTION1_SETTINGS)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.FirstSection = ReadRelayValues.FirstSection;
								sprintf(KeyBuffer,"%02d",((unsigned int)ReadRelayValues.SecondSection));
								LCDGotoXY(14,4);
								TestType = TBT_MMI_SECTION2_SETTINGS;
							}
							else
							{
								KeyIndex =0;
								WriteRelayValues.FirstSection = atoi(KeyBuffer);
								if(WriteRelayValues.FirstSection <=0x03)
								{
									LCDGotoXY(14,4);
									
									TestType = TBT_MMI_SECTION2_SETTINGS;
								}
								else
								{
									LCDGotoXY(14,3);
									sprintf(KeyBuffer,"%02d",((unsigned int)ReadRelayValues.FirstSection));
									TestType = TBT_MMI_SECTION1_SETTINGS;
								}
							}
						}
						else if(TestType ==TBT_MMI_SECTION2_SETTINGS)
						{
							if(!KeyIndex)
							{
								WriteRelayValues.SecondSection = ReadRelayValues.SecondSection;
								TestType = 0xff;
								LCDInstWrite(LCD_BLINKING_OFF);
								FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
								WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
								WriteRelayValues.K1StopTime = ReadRelayValues.K1StopTime;
								WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
								WriteRelayValues.K2StopTime = ReadRelayValues.K2StopTime;
								WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
								WriteRelayValues.K3StopTime = ReadRelayValues.K3StopTime;
								WriteRelayValues.PRStart = ReadRelayValues.PRStart;
								WriteRelayValues.PRDuration = ReadRelayValues.PRDuration;
								WriteRelayValues.PRCount = ReadRelayValues.PRCount;
								WriteRelayValues.Interval = ReadRelayValues.Interval;
								strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
								WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
								WriteRelayValues.Testduration = ReadRelayValues.Testduration;
								FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
								FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
								MainMenu();
							}
							else
							{
								KeyIndex =0;
								WriteRelayValues.SecondSection = atoi(KeyBuffer);
								if(WriteRelayValues.SecondSection <=0x03)
								{
									TestType = 0xff;
									LCDInstWrite(LCD_BLINKING_OFF);
									FLASH_Read(RELAY_DATA_ADDRESS(BatteryIndex), (char*)&ReadRelayValues, sizeof(struct Relay));
									WriteRelayValues.K1StartTime = ReadRelayValues.K1StartTime;
									WriteRelayValues.K1StopTime  = ReadRelayValues.K1StopTime;
									WriteRelayValues.K2StartTime = ReadRelayValues.K2StartTime;
									WriteRelayValues.K2StopTime  = ReadRelayValues.K2StopTime;
									WriteRelayValues.K3StartTime = ReadRelayValues.K3StartTime;
									WriteRelayValues.K3StopTime  = ReadRelayValues.K3StopTime;
									WriteRelayValues.PRStart     = ReadRelayValues.PRStart;
									WriteRelayValues.PRDuration  = ReadRelayValues.PRDuration;
									WriteRelayValues.PRCount     = ReadRelayValues.PRCount;
									WriteRelayValues.Interval    = ReadRelayValues.Interval;
									strcpy(WriteRelayValues.BatteryName,ReadRelayValues.BatteryName);
									WriteRelayValues.IgnitionDuration = ReadRelayValues.IgnitionDuration;
									WriteRelayValues.Testduration = ReadRelayValues.Testduration;
									FLASH_PageErase(RELAY_DATA_ADDRESS(BatteryIndex));
									FLASH_Write (RELAY_DATA_ADDRESS(BatteryIndex), (char*) &WriteRelayValues,sizeof(struct Relay));
									MainMenu();
									}
								else
								{
									LCDGotoXY(11,4);
									sprintf(KeyBuffer,"%02d",((unsigned int)ReadRelayValues.SecondSection));
									TestType = TBT_MMI_SECTION2_SETTINGS;
								}
							}
						}
		
					
					break;

				}
			break;
			case CLEAR_KEY : //clear key(# key on keypad)
				switch(MMI_screen)
				{
					case TBT_MMI_BATTERY_NUMERIC_KEY:
							LCDInstWrite(LCD_BLINKING_OFF);
							TestConfigurations();
					break;
					case TBT_MMI_TEST_SELECTION:
					case TBT_MMI_IGNITE_KEY:
					case TBT_MMI_RESET_ABORT:
					case TBT_MMI_TEST_CONFIGURATION:
					case TBT_MMI_DATE_TIME_SETTINGS:
					case TBT_MMI_CONNECT_BATTERY:  //added on july 07
					case TBT_MMI_CONNECT_LOAD:
					case TBT_MMI_RELAY_SELECTION_KEYS:  //added on july 70
					case TBT_MMI_TEST_PROCESSING:
					case TBT_MMI_TEST_COMPLETED:  //for testing only
					case SETTINGS:
					case TBT_MMI_SECTION_SETTINGS:
					case TBT_MMI_RECORD_INFO:  
					case TBT_MMI_CONDITION_MENU:
						LCDInstWrite(LCD_BLINKING_OFF);
						MainMenu();
					break;
					case TBT_MMI_NEW_RELAY_KEY1:
					case TBT_MMI_NEW_RELAY_KEY1_PR:
					case TBT_MMI_NEW_RELAY_KEY1_K3:
					case TBT_MMI_NEW_RELAY_KEY1_K2:
						LCDWriteLine(2,"                    ",2);
						LCDInstWrite(LCD_BLINKING_OFF);
						LCDGotoXY(12,1);
						LCDPutText("  ");
							
						RelaySelections();
					break;	
					case TBT_MMI_CONDITION_50_1:
					case TBT_MMI_CONDITION_50_2:
					case TBT_MMI_CONDITION_50_3:
					case TBT_MMI_CONDITION_50_4:
					case TBT_MMI_CONDITION_50_5:
						LCDInstWrite(LCD_BLINKING_OFF);
						TestConditoion_Menu();
					break;
				}
			break;
			case DECIMAL_POINT_KEY: //decimal key('C' key on keypad)


			break;
			case RESET_KEY:  //reset key('D' key on Keypad)
				SFRPAGE = 0x00;
				RSTSRC |= 0x10;  //reset the controller
			break;
						
			default :
				//		  RecordsInformation();					   					  		
			break;
		}//switch

